题目描述，判断一个数是否是回数。（回数是指从前往后看和从后往前看都一样的数）

我的思路：首先可以判断的是，负数不存在回数，对于非负数的求解情况，我的思路时首先将该整数转化为一个字符串，然后将该字符串进行反转，
然后比较两个字符串是否相等，具体代码如下：

class Solution(object):
    def isPalindrome(self, x):
        """
        :type x: int
        :rtype: bool
        """
        if x<0:
            return False
        else:
            x1 = str(x)[::-1]
            #此处应该就具体机器的字长进行整数是否溢出的判断。
            if x1 == str(x):
                return True
            else:
                return False
 
 这样做可能存在反转后整数溢出的问题，因此在将整数反转后需要对其进行大小判断。


另一思路：因为要将数字进行逆序，因此想到栈这种数据结构，首先将整数转化为字符串，然后将该字符串压入堆栈，然后弹出一一比较。

第三思路：直接将整数从两头读取进行比较，具体程序如下：

class Solution:
    # @param x, an integer
    # @return a boolean
    def isPalindrome(self, x):
        if x < 0:
            return False      #负数肯定不是回数

        ranger = 1
        while x // ranger >= 10:
            ranger *= 10     #统计数值x的数量级，d地板除得最高位，取余后得到最后面的数位

        while x:
            left = x // ranger   #得到最高位的数字
            right = x % 10       #得到最低位的数字
            if left != right:
                return False
            
            x = (x % ranger) // 10   #更新x的值，即去掉已经比较过的最高位和最低位。
            ranger /= 100       #去掉了两个数位，因此ranger也缩小两个数量级。

        return True
